// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: operation_queries.sql

package store

import (
	"context"

	"github.com/google/uuid"
)

const insertOperation = `-- name: InsertOperation :one
INSERT INTO operations (id, from_account_id, to_account_id, amount, type, created_by)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, from_account_id, to_account_id, amount, type, created_at, created_by, status
`

type InsertOperationParams struct {
	ID            uuid.UUID `json:"id"`
	FromAccountID uuid.UUID `json:"fromAccountId"`
	ToAccountID   uuid.UUID `json:"toAccountId"`
	Amount        int64     `json:"amount"`
	Type          string    `json:"type"`
	CreatedBy     uuid.UUID `json:"createdBy"`
}

func (q *Queries) InsertOperation(ctx context.Context, arg InsertOperationParams) (Operation, error) {
	row := q.db.QueryRowContext(ctx, insertOperation,
		arg.ID,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Amount,
		arg.Type,
		arg.CreatedBy,
	)
	var i Operation
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.Type,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.Status,
	)
	return i, err
}

const updateOperationStatus = `-- name: UpdateOperationStatus :one
UPDATE operations
SET status = $1
WHERE id = $2
RETURNING id, from_account_id, to_account_id, amount, type, created_at, created_by, status
`

type UpdateOperationStatusParams struct {
	Status string    `json:"status"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) UpdateOperationStatus(ctx context.Context, arg UpdateOperationStatusParams) (Operation, error) {
	row := q.db.QueryRowContext(ctx, updateOperationStatus, arg.Status, arg.ID)
	var i Operation
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.Type,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.Status,
	)
	return i, err
}
