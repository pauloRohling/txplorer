// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transaction_queries.sql

package store

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const insertTransaction = `-- name: InsertTransaction :one
INSERT INTO transactions (id, from_account_id, to_account_id, amount, timestamp, status)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, from_account_id, to_account_id, amount, timestamp, status
`

type InsertTransactionParams struct {
	ID            uuid.UUID `json:"id"`
	FromAccountID uuid.UUID `json:"fromAccountId"`
	ToAccountID   uuid.UUID `json:"toAccountId"`
	Amount        int64     `json:"amount"`
	Timestamp     time.Time `json:"timestamp"`
	Status        string    `json:"status"`
}

func (q *Queries) InsertTransaction(ctx context.Context, arg InsertTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, insertTransaction,
		arg.ID,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Amount,
		arg.Timestamp,
		arg.Status,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.Timestamp,
		&i.Status,
	)
	return i, err
}

const updateTransactionStatus = `-- name: UpdateTransactionStatus :one
UPDATE transactions
SET status = $1
WHERE id = $2
RETURNING id, from_account_id, to_account_id, amount, timestamp, status
`

type UpdateTransactionStatusParams struct {
	Status string    `json:"status"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, updateTransactionStatus, arg.Status, arg.ID)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.Timestamp,
		&i.Status,
	)
	return i, err
}
