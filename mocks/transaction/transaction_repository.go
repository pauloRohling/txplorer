// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocktransaction

import (
	context "context"
	model "xplorer/internal/model"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockTransactionRepository is an autogenerated mock type for the TransactionRepository type
type MockTransactionRepository struct {
	mock.Mock
}

type MockTransactionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionRepository) EXPECT() *MockTransactionRepository_Expecter {
	return &MockTransactionRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, entity
func (_m *MockTransactionRepository) Create(ctx context.Context, entity *model.Transaction) (*model.Transaction, error) {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Transaction) (*model.Transaction, error)); ok {
		return rf(ctx, entity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Transaction) *model.Transaction); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Transaction) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTransactionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *model.Transaction
func (_e *MockTransactionRepository_Expecter) Create(ctx interface{}, entity interface{}) *MockTransactionRepository_Create_Call {
	return &MockTransactionRepository_Create_Call{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *MockTransactionRepository_Create_Call) Run(run func(ctx context.Context, entity *model.Transaction)) *MockTransactionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Transaction))
	})
	return _c
}

func (_c *MockTransactionRepository_Create_Call) Return(_a0 *model.Transaction, _a1 error) *MockTransactionRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionRepository_Create_Call) RunAndReturn(run func(context.Context, *model.Transaction) (*model.Transaction, error)) *MockTransactionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: ctx, id, status
func (_m *MockTransactionRepository) UpdateStatus(ctx context.Context, id uuid.UUID, status model.TransactionStatus) (*model.Transaction, error) {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 *model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.TransactionStatus) (*model.Transaction, error)); ok {
		return rf(ctx, id, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.TransactionStatus) *model.Transaction); ok {
		r0 = rf(ctx, id, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, model.TransactionStatus) error); ok {
		r1 = rf(ctx, id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTransactionRepository_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockTransactionRepository_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - status model.TransactionStatus
func (_e *MockTransactionRepository_Expecter) UpdateStatus(ctx interface{}, id interface{}, status interface{}) *MockTransactionRepository_UpdateStatus_Call {
	return &MockTransactionRepository_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, id, status)}
}

func (_c *MockTransactionRepository_UpdateStatus_Call) Run(run func(ctx context.Context, id uuid.UUID, status model.TransactionStatus)) *MockTransactionRepository_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(model.TransactionStatus))
	})
	return _c
}

func (_c *MockTransactionRepository_UpdateStatus_Call) Return(_a0 *model.Transaction, _a1 error) *MockTransactionRepository_UpdateStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionRepository_UpdateStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, model.TransactionStatus) (*model.Transaction, error)) *MockTransactionRepository_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionRepository creates a new instance of MockTransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionRepository {
	mock := &MockTransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
