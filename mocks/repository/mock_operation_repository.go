// Code generated by mockery v2.45.0. DO NOT EDIT.

package mockrepository

import (
	context "context"

	model "github.com/pauloRohling/txplorer/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockOperationRepository is an autogenerated mock type for the OperationRepository type
type MockOperationRepository struct {
	mock.Mock
}

type MockOperationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOperationRepository) EXPECT() *MockOperationRepository_Expecter {
	return &MockOperationRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, entity
func (_m *MockOperationRepository) Create(ctx context.Context, entity *model.Operation) (*model.Operation, error) {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Operation) (*model.Operation, error)); ok {
		return rf(ctx, entity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Operation) *model.Operation); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Operation) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockOperationRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *model.Operation
func (_e *MockOperationRepository_Expecter) Create(ctx interface{}, entity interface{}) *MockOperationRepository_Create_Call {
	return &MockOperationRepository_Create_Call{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *MockOperationRepository_Create_Call) Run(run func(ctx context.Context, entity *model.Operation)) *MockOperationRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Operation))
	})
	return _c
}

func (_c *MockOperationRepository_Create_Call) Return(_a0 *model.Operation, _a1 error) *MockOperationRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationRepository_Create_Call) RunAndReturn(run func(context.Context, *model.Operation) (*model.Operation, error)) *MockOperationRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: ctx, id, status
func (_m *MockOperationRepository) UpdateStatus(ctx context.Context, id uuid.UUID, status model.OperationStatus) (*model.Operation, error) {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 *model.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.OperationStatus) (*model.Operation, error)); ok {
		return rf(ctx, id, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, model.OperationStatus) *model.Operation); ok {
		r0 = rf(ctx, id, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, model.OperationStatus) error); ok {
		r1 = rf(ctx, id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationRepository_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockOperationRepository_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - status model.OperationStatus
func (_e *MockOperationRepository_Expecter) UpdateStatus(ctx interface{}, id interface{}, status interface{}) *MockOperationRepository_UpdateStatus_Call {
	return &MockOperationRepository_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, id, status)}
}

func (_c *MockOperationRepository_UpdateStatus_Call) Run(run func(ctx context.Context, id uuid.UUID, status model.OperationStatus)) *MockOperationRepository_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(model.OperationStatus))
	})
	return _c
}

func (_c *MockOperationRepository_UpdateStatus_Call) Return(_a0 *model.Operation, _a1 error) *MockOperationRepository_UpdateStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationRepository_UpdateStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, model.OperationStatus) (*model.Operation, error)) *MockOperationRepository_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOperationRepository creates a new instance of MockOperationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOperationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOperationRepository {
	mock := &MockOperationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
