// Code generated by mockery v2.44.1. DO NOT EDIT.

package mockrepository

import (
	context "context"

	model "github.com/pauloRohling/txplorer/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockAccountRepository is an autogenerated mock type for the AccountRepository type
type MockAccountRepository struct {
	mock.Mock
}

type MockAccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountRepository) EXPECT() *MockAccountRepository_Expecter {
	return &MockAccountRepository_Expecter{mock: &_m.Mock}
}

// AddBalanceById provides a mock function with given fields: ctx, id, balance
func (_m *MockAccountRepository) AddBalanceById(ctx context.Context, id uuid.UUID, balance int64) (*model.Account, error) {
	ret := _m.Called(ctx, id, balance)

	if len(ret) == 0 {
		panic("no return value specified for AddBalanceById")
	}

	var r0 *model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int64) (*model.Account, error)); ok {
		return rf(ctx, id, balance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int64) *model.Account); ok {
		r0 = rf(ctx, id, balance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int64) error); ok {
		r1 = rf(ctx, id, balance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountRepository_AddBalanceById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBalanceById'
type MockAccountRepository_AddBalanceById_Call struct {
	*mock.Call
}

// AddBalanceById is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - balance int64
func (_e *MockAccountRepository_Expecter) AddBalanceById(ctx interface{}, id interface{}, balance interface{}) *MockAccountRepository_AddBalanceById_Call {
	return &MockAccountRepository_AddBalanceById_Call{Call: _e.mock.On("AddBalanceById", ctx, id, balance)}
}

func (_c *MockAccountRepository_AddBalanceById_Call) Run(run func(ctx context.Context, id uuid.UUID, balance int64)) *MockAccountRepository_AddBalanceById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int64))
	})
	return _c
}

func (_c *MockAccountRepository_AddBalanceById_Call) Return(_a0 *model.Account, _a1 error) *MockAccountRepository_AddBalanceById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountRepository_AddBalanceById_Call) RunAndReturn(run func(context.Context, uuid.UUID, int64) (*model.Account, error)) *MockAccountRepository_AddBalanceById_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, userId
func (_m *MockAccountRepository) Create(ctx context.Context, userId uuid.UUID) (*model.Account, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Account, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Account); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
func (_e *MockAccountRepository_Expecter) Create(ctx interface{}, userId interface{}) *MockAccountRepository_Create_Call {
	return &MockAccountRepository_Create_Call{Call: _e.mock.On("Create", ctx, userId)}
}

func (_c *MockAccountRepository_Create_Call) Run(run func(ctx context.Context, userId uuid.UUID)) *MockAccountRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAccountRepository_Create_Call) Return(_a0 *model.Account, _a1 error) *MockAccountRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountRepository_Create_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.Account, error)) *MockAccountRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountRepository creates a new instance of MockAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountRepository {
	mock := &MockAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
